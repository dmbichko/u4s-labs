services:
  postgres:
    image: postgres:17
    restart: unless-stopped
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres        
      POSTGRES_PASSWORD: QAZxsw2     
      POSTGRES_DB: java_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app_network

  redis:
    image: redis:7
    container_name: redis_container
    environment:
      REDIS_PASSWORD: Uhsbp5jyDc
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_container
    env_file:
      - ./backend/.env
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=https://192.168.10.94
        - REACT_APP_API_PORT=443
    container_name: frontend_container
    environment:
      - DOMAIN_NAME=testwebsite
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge
